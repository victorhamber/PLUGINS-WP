import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');
const distDir = path.join(rootDir, 'dist');

async function prepareDeployment() {
  console.log('üöÄ Preparando aplica√ß√£o para deploy...\n');

  // 1. Criar package.json para produ√ß√£o
  console.log('üì¶ Criando package.json de produ√ß√£o...');
  const productionPackage = {
    name: "wp-plugins-marketplace",
    version: "1.0.0",
    type: "module",
    scripts: {
      start: "NODE_ENV=production node index.js"
    },
    dependencies: {
      "@neondatabase/serverless": "^0.10.4",
      "connect-pg-simple": "^10.0.0",
      "dotenv": "^17.2.3",
      "drizzle-orm": "^0.39.1",
      "drizzle-zod": "^0.8.0",
      "express": "^4.21.2",
      "express-session": "^1.18.1",
      "memoizee": "^0.4.17",
      "multer": "^2.0.2",
      "openid-client": "^6.8.1",
      "passport": "^0.7.0",
      "passport-local": "^1.0.0",
      "stripe": "^19.1.0",
      "zod": "^3.24.2"
    }
  };

  await fs.writeFile(
    path.join(distDir, 'package.json'),
    JSON.stringify(productionPackage, null, 2)
  );
  console.log('‚úÖ package.json criado\n');

  // 2. Copiar pasta uploads se existir
  console.log('üìÅ Copiando diret√≥rio uploads...');
  const uploadsSource = path.join(rootDir, 'uploads');
  const uploadsTarget = path.join(distDir, 'uploads');
  
  try {
    await fs.access(uploadsSource);
    // Usar fs.cp com op√ß√£o recursive para copiar diret√≥rios aninhados
    await fs.cp(uploadsSource, uploadsTarget, { recursive: true });
    console.log('‚úÖ Diret√≥rio uploads copiado\n');
  } catch (error) {
    console.log('‚ö†Ô∏è  Diret√≥rio uploads n√£o encontrado ou vazio\n');
  }

  // 3. Criar arquivo .env.example
  console.log('üìù Criando .env.example...');
  const envExample = `# Configura√ß√£o do Banco de Dados
DATABASE_URL=postgresql://user:password@host:5432/database

# Configura√ß√£o da Porta
PORT=5000

# Configura√ß√£o do Node
NODE_ENV=production

# Configura√ß√£o Stripe (opcional)
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=

# Configura√ß√£o Replit OAuth (opcional)
REPLIT_CLIENT_ID=
REPLIT_CLIENT_SECRET=
`;

  await fs.writeFile(
    path.join(distDir, '.env.example'),
    envExample
  );
  console.log('‚úÖ .env.example criado\n');

  // 4. Criar README de deploy
  console.log('üìÑ Criando README de deploy...');
  const readme = `# WP Plugins Marketplace - Guia de Deploy

## Prepara√ß√£o para Deploy no EasyPanel

### Passo 1: Configurar Vari√°veis de Ambiente

Antes de fazer o deploy, configure as seguintes vari√°veis de ambiente no EasyPanel:

\`\`\`
DATABASE_URL=postgresql://user:password@host:5432/database
PORT=5000
NODE_ENV=production
\`\`\`

Vari√°veis opcionais para pagamentos e autentica√ß√£o:
\`\`\`
STRIPE_SECRET_KEY=sua_chave_stripe
STRIPE_WEBHOOK_SECRET=seu_webhook_secret
REPLIT_CLIENT_ID=seu_client_id (se usar OAuth Replit)
REPLIT_CLIENT_SECRET=seu_client_secret (se usar OAuth Replit)
\`\`\`

### Passo 2: Fazer Upload do ZIP

1. Fa√ßa o upload do arquivo \`dist.zip\` no EasyPanel
2. O EasyPanel ir√° extrair os arquivos automaticamente
3. Configure o comando de build: \`npm install --production\`
4. Configure o comando de start: \`npm start\`

### Passo 3: Configurar Banco de Dados

1. Crie um banco de dados PostgreSQL no EasyPanel (ou use um externo)
2. Configure a vari√°vel DATABASE_URL com a string de conex√£o
3. Execute as migrations (se necess√°rio):
   - Acesse o terminal do container
   - Execute: \`npx drizzle-kit push\` (requer drizzle-kit como dev dependency)

### Estrutura de Arquivos

\`\`\`
dist/
‚îú‚îÄ‚îÄ index.js          # Servidor backend compilado
‚îú‚îÄ‚îÄ public/           # Arquivos est√°ticos do frontend
‚îú‚îÄ‚îÄ uploads/          # Diret√≥rio para uploads (criado automaticamente)
‚îú‚îÄ‚îÄ package.json      # Depend√™ncias de produ√ß√£o
‚îú‚îÄ‚îÄ .env.example      # Exemplo de configura√ß√£o
‚îî‚îÄ‚îÄ README.md         # Este arquivo
\`\`\`

### Comandos Dispon√≠veis

- \`npm start\`: Inicia o servidor em modo produ√ß√£o
- Servidor roda na porta 5000 (ou PORT definido nas vari√°veis de ambiente)

### Notas Importantes

1. **Banco de Dados**: Certifique-se que o banco PostgreSQL est√° acess√≠vel
2. **Uploads**: O diret√≥rio \`uploads/\` ser√° criado automaticamente se n√£o existir
3. **SSL**: Configure SSL no proxy reverso do EasyPanel se necess√°rio
4. **Dom√≠nio**: Configure seu dom√≠nio personalizado nas configura√ß√µes do EasyPanel

### Troubleshooting

**Erro de conex√£o com banco:**
- Verifique se DATABASE_URL est√° configurado corretamente
- Teste a conex√£o com o banco de dados

**Erro ao iniciar servidor:**
- Verifique os logs no EasyPanel
- Certifique-se que todas as vari√°veis de ambiente est√£o configuradas

**Problemas com uploads:**
- Verifique permiss√µes do diret√≥rio uploads/
- Certifique-se que o volume est√° montado corretamente
`;

  await fs.writeFile(
    path.join(distDir, 'README.md'),
    readme
  );
  console.log('‚úÖ README.md criado\n');

  console.log('‚ú® Prepara√ß√£o conclu√≠da!\n');
  console.log('üìã Pr√≥ximos passos:');
  console.log('1. Navegue at√© a pasta dist/');
  console.log('2. Comprima todo o conte√∫do em um arquivo ZIP');
  console.log('3. Fa√ßa upload do ZIP no EasyPanel');
  console.log('4. Configure as vari√°veis de ambiente');
  console.log('5. Inicie a aplica√ß√£o\n');
}

prepareDeployment().catch(console.error);
